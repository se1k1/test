task 2-a :
- find a closest static block within the nth frame (target frame)
must measure the distance
- statick block can be found by comparing the target frm and the 
ref frm
	- compare Tblk and Rblk
	- just do the MC, you get the motionComp [][][], then you have the data
	- if motionComp[][1] and if motionComp[][2] is zero, and diff=if motionComp[][0] is a small value, then replace the dynamic block with the chosen static block.
	-

1. best match to the targetBlock
2. closest to the target block


task 2-b :
=====================================



Use IDB and implement the following steps to achieve this task:
	- Select the target image.
		o For the target image, receive from the user a frame number n between 19 and 179. 19~179 frames in the data set include moving people.
	- Select the reference image.
		o Given the input n, use (n-2)th as the reference image. 
		Identify dynamic blocks in the target image by performing the block-based motion estimation 
		and checking motion vector as you have done in the task1.
	- Remove moving object from the target image. Apply two different approaches and produce and display two different result images:
		1. For each dynamic block d, find the closest static block s in the nth frame and replace d with s. 
		After processing all dynamic blocks, display the result.
		2. The 5th frame of test data set does not include any moving objects. Utilize the 5th frame to get 
		static block s. For each dynamic block d, find the static block s from 5th frame and replace d with s. 
		After processing all dynamic blocks, display the result.
	
	See the sample outputs for the result format.


Tue. 11/24/15
-------------

toDo:
- MC(), give matchingCriteria options



Sun. 11/22/15
-------------

BIG PICTURE (motion compensation):
	- we have T[][] and Ref[][]
	- divide T to macroBlks (DO NOT divide Ref[][] into macroBlks)
	- iterate through each macroBlks of T to find the best mach
	- once the best match is found, calculate motion vector
	( - then calculate the difference pixel value ) 
				<-- this is seperate

/*
 * - convert everything into gray scale image first - divide the original
* img to 16 x 16- you can just store it into the file
*/

BIG PICTURE (sequential search):
	- identify x,y
	- go to ref frm, and do the search
	- forloop of p
	- store difference in an array
	List<Integer> diffs = new LinkedList<Integer>();
	for(i = 1; i <= p; i++){

		diffs.add(compare T[x][y] with Ref[x-p][y-p] )// idx=0
		diffs.add(compare T[x][y] with Ref[x][y-p]) // idx=1
		diffs.add(compare T[x][y] with Ref[x+p][y-p]) // idx=2
		diffs.add(compare T[x][y] with Ref[x-p][y] )// idx=3
		diffs.add(compare T[x][y] with Ref[x][y] )// idx=4
		diffs.add(compare T[x][y] with Ref[x+p][y]) // idx=5
		diffs.add(compare T[x][y] with Ref[x-p][y+p])// idx=6
		diffs.add(compare T[x][y] with Ref[x][y+p] // idx=7
		diffs.add(compare T[x][y] with Ref[x+p][y+p])// idx=8
	}	

BIG PICTURE (logarithmic search):
  
  
  findMinDiff() will do:
	- per T[][] macroblock
	- go through each (2p + 1)^2 block in Ref[][]
		- find diff per searched block
		- instantiate refFrmBlk and add to diffs array


public float MAD( int[][] target, int[][] ref, int tx0, int ty0, 
			int rx0, int ry0,int macroBlkSizeIn )



- How do I test sequentialSearchMSD()?
	- create a dummy image 2d arrays, target[4][4] and ref[4][4]
		macroBlkSize = 2, 
	- assign simple pixel values
	- get the best matcing ref block and printout min, x, y
	
- combining the different search criteria and different diff. measure criteria  
===============
Motion Compensation - Algorithm
	•Given a sequence of frames (each have macroblocks) –
	•Encode first frame as IntraFrame
	•For each corresponding macroblock of next frame and current frame, find the difference.
		–If difference less than threshold => no motion, find residual error
		–If difference above threshold => may be motion, look in search range to find a matching block using matching criteria discussed above. Note motion vector and residual error
		–If difference (or total residual error) is too large for a majority of macroblocks, and/or after regular intervals encode the current frame as an Intraframe and proceed to previous step
================
Motion Compensation - Encoding
	•There are two things to encode here:
		–Motion Vector for every macroblock
		–Difference or residual for every macroblock
	•Motion vectors are typically encoded losslessly (similar to JPEG lossless mode)
	•The residuals e(x, y) are encoded lossy +lossless (DCT+Entropy) producing variable bit rate (VBR).
	•If smooth motion or no motion:
		–Motion prediction is good (residuals are small)
		–Entropy coded with few bits
	•If complex motion or change of scene:
		–Motion prediction is bad (residual are large)
		–Entropy coded with many bits	 
===================
Logarithmic Search Notes:
public Point FindElement(int[][] matrix, int number) {
    Point p = new Point(); // holds two integers and represents 
                           // a position in the matrix.
    int found = -1;
    for(int i = 0; i < N; i++) {
        found = binarySearch(matrix[i], number, 0, N);
        if(found != -1) { 
           p.setX(i); 
           p.setY(found); 
           return p; 
        }
    }
    return null;
}

=======================
MC() debug aid:

T:
01 02 03 04 01 02 03 04 
05 06 07 08 05 06 07 08 
09 10 11 12 09 10 11 12 
13 14 15 16 13 14 15 16 
01 02 03 04 01 02 03 04 
05 06 07 08 05 06 07 08 
09 10 11 12 09 10 11 12 
13 14 15 16 13 14 15 16 
R:
06 07 02 03 06 07 02 03 
10 11 06 10 10 11 06 10 
01 02 03 01 01 02 03 01 
01 06 07 03 01 06 07 03 
06 07 02 03 06 07 02 03 
10 11 06 10 10 11 06 10 
01 02 03 01 01 02 03 01 
01 06 07 03 01 06 07 03 